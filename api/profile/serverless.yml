service: autonomia-api-profile

frameworkVersion: '3'

plugins:
  - serverless-domain-manager

custom:
  customDomain:
    domainName: api-profile.autonomia.site
    basePath: ''
    stage: ${opt:stage, 'prod'}
    certificateId: 'cee74474-da0c-4aba-b9f7-3759e4eddd7e'
    createRoute53Record: false
    endpointType: 'edge'
  authorizer:
    name: cognitoAuthorizer
    type: COGNITO_USER_POOLS
    identitySource: method.request.header.Authorization
    arn: !ImportValue autonomia-api-auth-${self:provider.stage}-UserPoolArn

provider:
  name: aws
  runtime: nodejs18.x

  stage: ${opt:stage, 'prod'}
  region: us-east-1
  memorySize: 512
  timeout: 30
  vpc:
    securityGroupIds:
      - 'sg-0e9189ca9e6d0427d'
    subnetIds:
      - 'subnet-07184b6cfa97367e2'
      - 'subnet-000fbcffe0f8d9a11'
  environment:
    NODE_ENV: ${opt:stage, 'prod'}
    DB_HOST: ${ssm:/autonomia/${self:provider.stage}/db/host, 'autonomia-prod-db.cde6ocsqc6dk.us-east-1.rds.amazonaws.com'}
    DB_PORT: ${ssm:/autonomia/${self:provider.stage}/db/port, '5432'}
    DB_NAME: ${ssm:/autonomia/${self:provider.stage}/db/name, 'autonomia_db'}
    DB_USER: ${ssm:/autonomia/${self:provider.stage}/db/user, 'autonomia_admin'}
    DB_PASSWORD: ${ssm:/autonomia/${self:provider.stage}/db/password, ''}
    DB_SSL_ENABLED: ${ssm:/autonomia/${self:provider.stage}/db/ssl-enabled, 'false'}
    REDIS_HOST: ${ssm:/autonomia/${self:provider.stage}/redis/host, ''}
    REDIS_PORT: ${ssm:/autonomia/${self:provider.stage}/redis/port, '6379'}
    CACHE_TTL: ${ssm:/autonomia/${self:provider.stage}/cache/ttl, '300'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - rds:*
      Resource: "*"
    - Effect: Allow
      Action:
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
      Resource: "*"
    - Effect: Allow
      Action:
        - ssm:GetParameter
      Resource: "arn:aws:ssm:us-east-1:*:parameter/autonomia/*"
    - Effect: Allow
      Action:
        - elasticache:*
      Resource: "*"

functions:
  registerUser:
    handler: handlers/register.handler
    events:
      - http:
          path: Autonomia/Profile/Register
          method: post
          cors: true
          
  getUserByEmail:
    handler: handlers/get-user-by-email.handler
    events:
      - http:
          path: Autonomia/Profile/Users/email
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                email: true
          authorizer: ${self:custom.authorizer}
